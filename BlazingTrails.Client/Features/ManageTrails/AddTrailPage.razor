@page "/add-trail"

<PageTitle>Add Trail - Blazing Trails</PageTitle>

<nav aria-label="breadcrumb">    
    <ol class="breadcrumb">        
        <li class="breadcrumb-item">
            <a href="/">Home</a>
        </li>        
        <li class="breadcrumb-item active" aria-current="page">
            Add Trail
        </li>    
    </ol>
</nav>
<h3 class="mt-5 mb-4">Add a trail</h3>





<EditForm Model="_trail" OnValidSubmit="SubmitForm">
    <!--The EditForm component is used to define a Blazor form. As a minimum, a model and asubmit action must be defined-->

    <FluentValidationValidator /> <!-- tells the editform that we wan to use fluent validation-->



    <FormSection Title="Basic Details" HelpText="This is information used to identify the trail that can be searched and help hikers find it.">
    <!--The new FormSection component defines the section title and help text.-->
    
    <!--An InputText component is used to collect the trail name-->
        <FormFieldSet Width="col-6">
            <label for="trailName" class="text-secondary fw-bold">Name</label>
            <InputText @bind-Value="_trail.Name" class="form-control" id="trailName" />
            <ValidationMessage For="@(() => _trail.Name)" />
        </FormFieldSet>


        <!--An InputText component is used to collect the trail description-->
        <FormFieldSet>
            <label for="trailDescription" class="text-secondary fw-bold">Description</label>
            <InputTextArea @bind-Value="_trail.Description" class="form-control" id="trailDescription" />
            <ValidationMessage For="@(() => _trail.Description)" />
        </FormFieldSet>

     
        <!--An InputText component is used to collect the trail location-->
        <FormFieldSet Width="col-6">
            <label for="trailLocation" class="text-secondary fw-bold">Location</label>
            <InputText @bind-Value="_trail.Location" class="form-control" id="trailLocation" />
            <ValidationMessage For="@(() => _trail.Location)" />
        </FormFieldSet>

    </FormSection>

    <FormSection Title="Difficulty" HelpText="Help other thikers out by telling them the length of the trail is and how long it might take them.">
        <FormFieldSet Width="col-3">
            <label for="trailLength" class="text-secondary fw-bold">Length (km)</label>
            <InputNumber @bind-Value="_trail.Length" class="form-control" id="trailLength" />
            <ValidationMessage For="@(() => _trail.Length)" />
        </FormFieldSet>
    </FormSection>

    <FormSection Title="Route Instructions" HelpText="Route instructions are a guide for the trail. This helps the hikers new to the trail to stay on track.">
        @{
            var i = 0; // The i variable keeps track of the number of route instructions and is used to set the stageproperty on each RouteInstruction. The stage is used to order the route instructions

            foreach (var routeInstruction in _trail.Route)
            {
                i++;
                routeInstruction.Stage = i;



                <div class="row">
                    <div class="col-2">
                        <div class="form-group">
                            <label class="fw-bold text-secondary">Stage</label>
                            <p>@routeInstruction.Stage</p> 
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="routeInstructionDescription" class="fw-bold text-secondary">Description</label>
                            <InputText @bind-Value="routeInstruction.Description" class="form-control" id="routeInstructionDescription" />
                            <ValidationMessage For="@(() => routeInstruction.Description)" />
                        </div>
                    </div>
                    <div class="col-1 d-flex mt-3">
                        <button
                            @onclick="@(() => _trail.Route.Remove(routeInstruction))"
                            class="btn btn-link" type="button">
                            <svg width="1em" 
                                 height="1em" 
                                 viewBox="0 0 16 16" 
                                 class="bi bi-x-circle-fill text-danger" 
                                 fill="currentColor"
                                 xmlns="http://www.w3.org/2000/svg">
                                 
                                 <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
                            </svg>
                        </button>
                    </div> 
                </div>
            }
        }

            <div class="row">        
                <div class="col">            
                    <button class="btn btn-outline-primary" type="button" @onclick="@(() => _trail.Route.Add(new TrailDto.RouteInstruction()))">Add Instruction</button>
                <ValidationMessage For="@(() => _trail.Route)" />
                </div>
            </div>
        
    </FormSection>

    <div class="mt-4 mb-5">
        <div class="row">
            <div class="offset-4 col-8 text-right">
                <button class="btn btn-outline-secondary"
                        type="button" 
                        @onclick="@(() => _trail = new TrailDto())">
                    Reset
                </button> <!--The Reset button clears the form by creating a new instance of the TrailDto class. When working with nonsubmit buttons in Blazor forms, explicitly set their type attribute to button. If you don’t, they’ll default trigger the form to submit-->
                <button class="btn btn-primary"
                        type="submit">
                    Submit
                </button> <!--Clicking the Submit button will invoke the OnValidSubmit event and call the SubmitFormmethod-->
            </div>
        </div>
    </div>
</EditForm>

@code {
    private TrailDto _trail = new TrailDto(); // A new instance of the TrailDto class is created when the component is initialized andassigned to the EditForm’s Model parameter. Input components in the form will be boundto its properties

    private async Task SubmitForm() // The SubmitForm method is called whenever the EditForm’s OnValidSubmit event isinvoked.
    {
        //TODO: Submit data to API
    }
}