@inherits InputBase<int>

<div class="input-time">
    <div>
        <input class="form-control @CssClass" type="number" min="0" @onchange="SetHourValue" value="@_hours" /> <!-- The hour input’s value is set using the _hours private field. Whenever that value ischanged, the onchange event calls the SetHourValue method-->
        <label>Hours</label>
    </div>
    <div>
        <input class="form-control @CssClass" type="number" min="0" max="59" @onchange="SetMinuteValue" value="@_minutes" /> <!--The minutes input’s value is set using the _minutes private field. Whenever that value ischanged, the onchange event calls the SetMinuteValue method-->
        <label>Minutes</label>
    </div>
</div>

@code
{
    private int _hours;
    private int _minutes;

    protected override bool TryParseValueFromString(string? value, out int result, out string validationErrorMessage) // we have to include this because it is the default, but we will just throw an exception
    {
        throw new NotImplementedException();
    }

    protected override void OnParametersSet()

    {
        if (CurrentValue > 0) // if there is already a current value assigned on the record, this will populate the fields in the UI accordingly
        {
            _hours = CurrentValue / 60;
            _minutes = CurrentValue % 60;
        }
    }

    private void SetHourValue(ChangeEventArgs args) // Using the ChangeEventArgs, this method extracts the new value entered by the user andconverts it to an integer and sets the _hours field. It then calls SetCurrentValue.

    {
        int.TryParse(args.Value?.ToString(), out _hours);
        SetCurrentValue();
    }

    private void SetMinuteValue (ChangeEventArgs args)
    {
        int.TryParse(args.Value?.ToString(), out _minutes);
        SetCurrentValue();
    }

    private void SetCurrentValue() => CurrentValue = (_hours * 60) + _minutes; // The _hours and _minutes fields are converted to a total minutes value, and then theCurrentValue property is set to that value
}